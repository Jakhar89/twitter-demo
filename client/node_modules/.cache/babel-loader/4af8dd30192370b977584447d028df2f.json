{"ast":null,"code":"import _classCallCheck from \"/Users/jack/project/twitter-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jack/project/twitter-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jack/project/twitter-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jack/project/twitter-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jack/project/twitter-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/jack/project/twitter-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jack/project/twitter-demo/client/src/components/search/search.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nquery timelinesQuery{ \\n    timelines {\\n    id\\n    id_str\\n    text\\n    favourited\\n    user {\\n        name\\n      }\\n    }\\n }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport './search.css';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { withApollo } from 'react-apollo';\nvar newQ = gql(_templateObject());\n\nvar Search =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Search, _Component);\n\n  function Search(props) {\n    var _this;\n\n    _classCallCheck(this, Search);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Search).call(this, props));\n\n    _this.inputChange = function (e) {\n      _this.setState({\n        searchText: e.target.value\n      });\n    };\n\n    _this.keyword = function () {\n      fetch(\"/api/search?key=\".concat(_this.state.searchText)).then(function (res) {\n        return res.json();\n      }).then(function (tweet) {\n        return _this.setState({\n          tweets: tweet.statuses\n        }, function () {\n          return console.log('Customers fetched...', tweet);\n        });\n      });\n    };\n\n    _this.like = function (e) {\n      fetch(\"/api/like?key=\".concat(e)).then(function (res) {\n        return res.json();\n      }).then(function (like) {\n        return _this.setState({\n          like: _this.state.like.concat([like.id])\n        }, function () {\n          return console.log('Customers fetched...', _this.state.like);\n        });\n      });\n    };\n\n    _this.queryS = function () {\n      _this.props.client.query({\n        query: newQ\n      }).then(function (_ref) {\n        var data = _ref.data;\n        return _this.setState({\n          tweets: data.timelines\n        }, function () {\n          return console.log(data);\n        });\n      });\n    };\n\n    _this.state = {\n      tweets: [],\n      searchText: null,\n      like: []\n    };\n    var _this$props = _this.props,\n        smallText = _this$props.smallText,\n        func = _this$props.func;\n    _this.smallText = smallText ? smallText : \"Use Twitter user/handle name to capture tweets\";\n    _this.call = func;\n    return _this;\n  }\n\n  _createClass(Search, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Search Twitter\"), React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, this.smallText), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        onChange: this.inputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.call === 'keyword' ? this.keyword : this.queryS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Search\")), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, this.state.tweets.length > 0 && this.call !== 'keyword' ? this.state.tweets[0].user.name : null), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, this.state.tweets.map(function (el) {\n        var check = _this2.state.like.includes(el.id);\n\n        var fav = el.favorited;\n        return React.createElement(\"li\", {\n          key: el.id,\n          className: check || fav ? 'liked' : null,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, el.text, !(check || fav) ? React.createElement(\"button\", {\n          className: \"like-btn\",\n          onClick: _this2.like.bind(_this2, el.id_str),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, \"Like\") : null);\n      })));\n    }\n  }]);\n\n  return Search;\n}(Component);\n\nexport default withApollo(Search);","map":{"version":3,"sources":["/Users/jack/project/twitter-demo/client/src/components/search/search.js"],"names":["React","Component","gql","Query","withApollo","newQ","Search","props","inputChange","e","setState","searchText","target","value","keyword","fetch","state","then","res","json","tweet","tweets","statuses","console","log","like","concat","id","queryS","client","query","data","timelines","smallText","func","call","length","user","name","map","el","check","includes","fav","favorited","text","bind","id_str"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './search.css';\nimport gql from 'graphql-tag';\nimport {Query} from 'react-apollo';\nimport { withApollo } from 'react-apollo';\n\nconst newQ  = gql`\nquery timelinesQuery{ \n    timelines {\n    id\n    id_str\n    text\n    favourited\n    user {\n        name\n      }\n    }\n }\n`;\n\nclass Search extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: [],\n      searchText:null,\n      like:[]\n    };  \n    let {smallText,func} = this.props \n    this.smallText=(smallText)?smallText:`Use Twitter user/handle name to capture tweets`;\n    this.call=func;\n  }\n  \n  \n  inputChange=(e)=>{\n    this.setState({searchText:e.target.value})\n  }\n\n\n  keyword = ()=>{\n    fetch(`/api/search?key=${this.state.searchText}`)\n    .then(res => res.json())\n    .then(tweet => this.setState({tweets: tweet.statuses}, () => console.log('Customers fetched...', tweet)));\n  }\n  \n  like = (e)=>{\n    fetch(`/api/like?key=${e}`)\n    .then(res => res.json())\n    .then(like => this.setState({like:this.state.like.concat([like.id])}, () => console.log('Customers fetched...', this.state.like)));\n  }\n \n  //implementing the GraphQL with Apollo Client\n  queryS = ()=>{\n    this.props.client.query({query:newQ})\n    .then(({data})=>this.setState({tweets:data.timelines},()=>console.log(data)))\n  }\n  \n  \n  \n\n  render() {\n    return (\n      <div>\n        <h1>Search Twitter</h1>\n        \n          <small>{this.smallText}</small>\n          <div>\n            <input type='text' onChange={this.inputChange}/>\n            <button onClick={(this.call==='keyword')?this.keyword:this.queryS}>Search</button>\n          </div>\n          <h3>{(this.state.tweets.length>0 && this.call!=='keyword')?this.state.tweets[0].user.name:null}</h3>\n          <ul>\n\n          {this.state.tweets.map(el => {\n            let check = this.state.like.includes(el.id);\n            let fav = el.favorited\n            return <li key={el.id} className={(check||fav)?'liked':null}>\n                        {el.text}\n                      {(!(check||fav))?<button className='like-btn' onClick={this.like.bind(this,el.id_str)}>Like</button>\n                      :null}\n                  </li>\n          })}\n          \n          </ul>\n      </div>\n    );\n  }\n}\n\nexport default withApollo(Search);\n"]},"metadata":{},"sourceType":"module"}