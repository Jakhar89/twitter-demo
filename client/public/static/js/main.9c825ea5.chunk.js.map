{"version":3,"sources":["components/navigation/nav.js","components/search/search.js","components/tweeting/tweeting.js","components/keyword/keyword.js","App.js","registerServiceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","Link","to","Component","newQ","gql","_templateObject","Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inputChange","e","setState","searchText","target","value","keyword","fetch","concat","state","then","res","json","tweet","tweets","statuses","console","log","like","id","queryS","client","query","variables","var","_ref","data","timelines","_this$props","smallText","func","_this2","type","onChange","onClick","Fragment","length","user","name","map","el","check","includes","fav","favorited","key","text","bind","id_str","withApollo","Tweeting","handleChange","posting","keys","created_at","screen_name","Keywords","search_search","Client","ApolloClient","uri","App","react_apollo_esm","BrowserRouter","navigation_nav","Route","path","exact","component","Keyword","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"oXAqBeA,0LAdP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,iCAEAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,SACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,aAAT,eACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAT,oBATFC,kSCElB,IAAMC,EAAQC,IAAJC,KAcJC,cAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAYRQ,YAAY,SAACC,GACXR,EAAKS,SAAS,CAACC,WAAWF,EAAEG,OAAOC,SAdlBZ,EAkBnBa,QAAU,WACRC,MAAK,mBAAAC,OAAoBf,EAAKgB,MAAMN,aACnCO,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAK,OAAIpB,EAAKS,SAAS,CAACY,OAAQD,EAAME,UAAW,kBAAMC,QAAQC,IAAI,uBAAwBJ,QArBhFpB,EAwBnByB,KAAO,SAACjB,GACNM,MAAK,iBAAAC,OAAkBP,IACtBS,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAQ,GAAI,OAAIzB,EAAKS,SAAS,CAACgB,KAAKzB,EAAKgB,MAAMS,KAAKV,OAAO,CAACU,EAAKC,MAAO,kBAAMH,QAAQC,IAAI,uBAAwBxB,EAAKgB,MAAMS,WA3B1GzB,EAgCnB2B,OAAS,WACP3B,EAAKD,MAAM6B,OAAOC,MAAM,CAACA,MAAMlC,EAAKmC,UAAU,CAACC,IAAI/B,EAAKgB,MAAMN,cAC7DO,KAAK,SAAAe,GAAA,IAAEC,EAAFD,EAAEC,KAAF,OAAUjC,EAAKS,SAAS,CAACY,OAAOY,EAAKC,WAAW,kBAAIX,QAAQC,IAAIS,QAhCtEjC,EAAKgB,MAAQ,CACXK,OAAQ,GACRX,WAAW,GACXe,KAAK,IALU,IAAAU,EAOMnC,EAAKD,MAAvBqC,EAPYD,EAOZC,UAAUC,EAPEF,EAOFE,KAPE,OAQjBrC,EAAKoC,UAAWA,GAAD,iDACfpC,EAAKM,KAAK+B,EATOrC,wEAwCV,IAAAsC,EAAAnC,KAEP,OADAoB,QAAQC,IAAIrB,KAAKa,OAEf5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BAEEF,EAAAC,EAAAC,cAAA,aAAQa,KAAKiC,WACbhD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOiD,KAAK,OAAOC,SAAUrC,KAAKI,cAClCnB,EAAAC,EAAAC,cAAA,UAAQmD,QAAsB,YAAZtC,KAAKG,KAAkBH,KAAKU,QAAQV,KAAKwB,QAA3D,WAEAxB,KAAKa,MAAMK,OACXjC,EAAAC,EAAAC,cAACF,EAAAC,EAAMqD,SAAP,KACEtD,EAAAC,EAAAC,cAAA,UAAMa,KAAKa,MAAMK,OAAOsB,OAAO,GAAiB,YAAZxC,KAAKG,KAAkBH,KAAKa,MAAMK,OAAO,GAAGuB,KAAKC,KAAK,MAC1FzD,EAAAC,EAAAC,cAAA,UACGa,KAAKa,MAAMK,OAAOyB,IAAI,SAAAC,GACrB,IAAIC,EAAQV,EAAKtB,MAAMS,KAAKwB,SAASF,EAAGrB,IACpCwB,EAAMH,EAAGI,UACb,OAAO/D,EAAAC,EAAAC,cAAA,MAAI8D,IAAKL,EAAGrB,GAAInC,UAAYyD,GAAOE,EAAK,QAAQ,MAC1CH,EAAGM,KACFL,GAAOE,EACV,KADgB9D,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWkD,QAASH,EAAKb,KAAK6B,KAAKhB,EAAKS,EAAGQ,SAA7D,aAM9B,aApEM7D,aA2EN8D,cAAW1D,GCtDX2D,qBAtCX,SAAAA,IAAc,IAAAzD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsD,IACVzD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwD,GAAAnD,KAAAH,QAOJuD,aAAa,SAAClD,GAAKR,EAAKS,SAAS,CAAC4C,KAAK7C,EAAEG,OAAOC,SARlCZ,EASd2D,QAAQ,WACJ7C,MAAK,sBAAAC,OAAuBf,EAAKgB,MAAMqC,OAClCpC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAK,OAAIpB,EAAKS,SAAS,CAACW,MAAMA,GAAQ,kBAAMG,QAAQC,IAAI,uBAAwBJ,QAV1FpB,EAAKgB,MAAQ,CACXI,MAAO,GACPiC,KAAK,MAJGrD,wEAeV,OACIZ,EAAAC,EAAAC,cAACF,EAAAC,EAAMqD,SAAP,KACItD,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YAAUC,UAAU,YAAYiD,SAAUrC,KAAKuD,eAC/CtE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAakD,QAAStC,KAAKwD,SAA7C,UAGC1D,OAAO2D,KAAKzD,KAAKa,MAAMI,OAAOuB,OAAO,EAClCvD,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,iCAAyBa,KAAKa,MAAMI,MAAMwB,KAAKC,MAC/CzD,EAAAC,EAAAC,cAAA,sBAAca,KAAKa,MAAMI,MAAMyC,YAC/BzE,EAAAC,EAAAC,cAAA,yBAAiBa,KAAKa,MAAMI,MAAMiC,MAClCjE,EAAAC,EAAAC,cAAA,sBAAca,KAAKa,MAAMI,MAAMwB,KAAKkB,cAEvC,aAhCFpE,cCURqE,0LANP,OACI3E,EAAAC,EAAAC,cAAC0E,EAAD,CAAQ5B,UAAU,iBAAiBC,KAAK,mBAJ7B3C,cCMjBuE,EAAU,UAAIC,GAAa,CAC/BC,IAAG,aA0BUC,mLApBX,OACEhF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CAAgBzC,OAAQqC,GACtB7E,EAAAC,EAAAC,cAACgF,EAAA,EAAD,KACAlF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,oBACAH,EAAAC,EAAAC,cAACiF,EAAD,OAGAnF,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW7E,IACjCV,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAOC,KAAK,YAAYC,OAAK,EAACC,UAAWlB,IACzCrE,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAOC,KAAK,WAAWC,OAAK,EAACC,UAAWC,cAblClF,aCLZmF,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTnE,KAAK,SAAAuE,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1E,QACfqE,UAAUC,cAAcO,WAK1BtE,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBsE,MAAM,SAAAC,GACLxE,QAAQwE,MAAM,4CAA6CA,KChEjEC,IAASC,OAAO7G,EAAAC,EAAAC,cAAC4G,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,OAAQ,WAC9B,IAAMpB,EAAK,GAAArE,OAAMuF,GAAN,sBAEPzB,EAwCV,SAAiCO,GAE/BtE,MAAMsE,GACHnE,KAAK,SAAAwF,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAM7F,KAAK,SAAAuE,GACjCA,EAAauB,aAAa9F,KAAK,WAC7B8D,OAAOC,SAASgC,aAKpB7B,EAAgBC,KAGnBU,MAAM,WACLvE,QAAQC,IACN,mEA5DAyF,CAAwB7B,GAGxBD,EAAgBC,MChCxB8B","file":"static/js/main.9c825ea5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Link} from 'react-router-dom';\n\nimport './nav.css';\n\nclass Nav extends Component{\n    render(){\n        return(\n            <nav className='navigation'>\n            <h3>List of API Clients</h3>\n            \n            <ul>\n                <li><Link to='/'>Home</Link></li>\n                <li><Link to='/tweeting'>Post Tweet</Link></li>\n                <li><Link to='/keyword'>Search</Link></li>\n            </ul>\n          </nav>\n        )\n    }\n}\n\nexport default Nav;","import React, { Component } from 'react';\nimport './search.css';\nimport gql from 'graphql-tag';\n//import {Query} from 'react-apollo';\nimport { withApollo } from 'react-apollo';\n\n\nconst newQ  = gql`\nquery timelinesQuery($var: String){ \n    timelines(screen_name:$var) {\n    id\n    id_str\n    text\n    favourited\n    user {\n        name\n      }\n    }\n}\n`;\n\nclass Search extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: [],\n      searchText:'',\n      like:[]\n    };  \n    let {smallText,func} = this.props \n    this.smallText=(smallText)?smallText:`Use Twitter user/handle name to capture tweets`;\n    this.call=func;\n  }\n  \n  \n  inputChange=(e)=>{\n    this.setState({searchText:e.target.value})\n  }\n\n\n  keyword = ()=>{\n    fetch(`/api/search?key=${this.state.searchText}`)\n    .then(res => res.json())\n    .then(tweet => this.setState({tweets: tweet.statuses}, () => console.log('Customers fetched...', tweet)));\n  }\n  \n  like = (e)=>{\n    fetch(`/api/like?key=${e}`)\n    .then(res => res.json())\n    .then(like => this.setState({like:this.state.like.concat([like.id])}, () => console.log('Customers fetched...', this.state.like)));\n  }\n \n  //implementing the GraphQL with Apollo Client\n  \n  queryS = ()=>{\n    this.props.client.query({query:newQ,variables:{var:this.state.searchText}})\n    .then(({data})=>this.setState({tweets:data.timelines},()=>console.log(data)))\n  }\n  \n  \n  \n\n  render() {\n    console.log(this.state)\n    return (\n      <div>\n        <h1>Search Twitter</h1>\n        \n          <small>{this.smallText}</small>\n          <div>\n            <input type='text' onChange={this.inputChange}/>\n            <button onClick={(this.call==='keyword')?this.keyword:this.queryS}>Search</button>\n          </div>\n          {(this.state.tweets )?\n            <React.Fragment>\n              <h3>{(this.state.tweets.length>0 && this.call!=='keyword')?this.state.tweets[0].user.name:null}</h3>\n              <ul>\n                {this.state.tweets.map(el => {\n                  let check = this.state.like.includes(el.id);\n                  let fav = el.favorited\n                  return <li key={el.id} className={(check||fav)?'liked':null}>\n                              {el.text}\n                            {(!(check||fav))?<button className='like-btn' onClick={this.like.bind(this,el.id_str)}>Like</button>\n                            :null}\n                        </li>\n                })}\n              </ul>\n            </React.Fragment>\n              :null\n          }\n      </div>\n    );\n  }\n}\n\nexport default withApollo(Search);\n","import React, { Component } from 'react';\nimport './tweeting.css';\n\nclass Tweeting extends Component{\n    constructor() {\n        super();\n        this.state = {\n          tweet: {},\n          text:null\n        };\n        \n      }\n    handleChange=(e)=>{this.setState({text:e.target.value})}\n    posting=()=>{\n        fetch(`/api/tweetPost?key=${this.state.text}`)\n            .then(res => res.json())\n            .then(tweet => this.setState({tweet:tweet}, () => console.log('Customers fetched...', tweet)));\n    }\n    render(){\n        return(\n            <React.Fragment>\n                <h2>Post a new Tweet</h2>\n                <div>\n                    <textarea className='text-area' onChange={this.handleChange}/>\n                    <br/>\n                    <button className='post-tweet' onClick={this.posting}>Tweet</button>\n                </div>\n                {\n                    (Object.keys(this.state.tweet).length>0 )?\n                        <ul>\n                            <li>Happy Tweeting!! Mr {this.state.tweet.user.name}</li>\n                            <li>Created: {this.state.tweet.created_at}</li>\n                            <li>Tweet text: {this.state.tweet.text}</li>\n                            <li>Handle: @{this.state.tweet.user.screen_name}</li>\n                        </ul>\n                        :null\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Tweeting;","import React, { Component } from 'react';\nimport './keyword.css';\nimport Search from '../search/search';\n\nclass Keywords extends Component{\n\n    render(){\n        return(\n            <Search smallText='Keyword Search' func='keyword' />\n        )\n    }\n}\n\nexport default Keywords","import React, { Component } from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Nav from './components/navigation/nav';\nimport Search from './components/search/search';\nimport Tweeting from './components/tweeting/tweeting';\nimport Keyword from './components/keyword/keyword';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\n\nconst Client  = new ApolloClient({\n  uri: `/graphql`\n})\n\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={Client}>\n        <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 className=\"App-title\">Jack Twitter API</h1>\n            <Nav />\n          </header>\n        \n            <Route path='/' exact component={Search}/>\n            <Route path='/tweeting' exact component={Tweeting}/>\n            <Route path='/Keyword' exact component={Keyword}/>\n          \n        </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}